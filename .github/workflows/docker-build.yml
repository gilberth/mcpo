name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{branch}}-{{sha}},enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        if: github.event_name != 'pull_request'
        run: |
          echo "🧪 Testing Docker image..."
          
          # Create test config
          echo '{"mcpServers": {"test": {"command": "echo", "args": ["Hello World"]}}}' > test-config.json
          
          # Run container for testing
          docker run -d --name mcpo-test \
            -p 8080:8000 \
            -v $(pwd)/test-config.json:/app/config.json \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            --config /app/config.json \
            --host 0.0.0.0 \
            --port 8000
          
          # Wait for startup
          sleep 10
          
          # Test endpoints
          echo "Testing WebUI endpoint..."
          WEBUI_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/webui/ || echo "000")
          echo "WebUI Status: $WEBUI_STATUS"
          
          echo "Testing Config API endpoint..."
          CONFIG_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/webui/config || echo "000")
          echo "Config API Status: $CONFIG_STATUS"
          
          echo "Testing API Docs endpoint..."
          DOCS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/docs || echo "000")
          echo "API Docs Status: $DOCS_STATUS"
          
          # Cleanup
          docker stop mcpo-test
          docker rm mcpo-test
          
          # Validate results
          if [ "$WEBUI_STATUS" = "200" ] && [ "$CONFIG_STATUS" = "200" ] && [ "$DOCS_STATUS" = "200" ]; then
            echo "✅ All tests passed!"
          else
            echo "❌ Some tests failed!"
            echo "WebUI: $WEBUI_STATUS, Config: $CONFIG_STATUS, Docs: $DOCS_STATUS"
            exit 1
          fi

      - name: Generate deployment instructions
        if: github.event_name != 'pull_request'
        run: |
          echo "## 🚀 Docker Image Built Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Available Tags:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Quick Start:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run the latest image" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d --name mcpo-webui \\" >> $GITHUB_STEP_SUMMARY
          echo "  -p 8000:8000 \\" >> $GITHUB_STEP_SUMMARY
          echo "  -v \$(pwd)/config.json:/app/config.json \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \\" >> $GITHUB_STEP_SUMMARY
          echo "  --config /app/config.json \\" >> $GITHUB_STEP_SUMMARY
          echo "  --host 0.0.0.0 \\" >> $GITHUB_STEP_SUMMARY
          echo "  --port 8000 \\" >> $GITHUB_STEP_SUMMARY
          echo "  --hot-reload" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Access URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- **WebUI**: http://localhost:8000/webui" >> $GITHUB_STEP_SUMMARY
          echo "- **API Docs**: http://localhost:8000/docs" >> $GITHUB_STEP_SUMMARY
          echo "- **Config API**: http://localhost:8000/webui/config" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Test Results:" >> $GITHUB_STEP_SUMMARY
          echo "- WebUI Endpoint: ✅ Working" >> $GITHUB_STEP_SUMMARY
          echo "- Config API: ✅ Working" >> $GITHUB_STEP_SUMMARY  
          echo "- API Docs: ✅ Working" >> $GITHUB_STEP_SUMMARY
          echo "- Multi-platform: ✅ amd64, arm64" >> $GITHUB_STEP_SUMMARY